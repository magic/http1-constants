import { version } from '@magic/test'
import defaultConstants, { constants, headers, status, methods } from '../src/index.js'

const spec = {
  status: {
    // 1xx Informational
    CONTINUE: 100,
    SWITCHING_PROTOCOLS: 101,
    PROCESSING: 102,
    EARLY_HINTS: 103,

    // 2xx Success
    OK: 200,
    CREATED: 201,
    ACCEPTED: 202,
    NON_AUTHORITATIVE_INFORMATION: 203,
    NO_CONTENT: 204,
    RESET_CONTENT: 205,
    PARTIAL_CONTENT: 206,
    MULTI_STATUS: 207,
    ALREADY_REPORTED: 208,
    IM_USED: 226,

    // 3xx Redirection
    MULTIPLE_CHOICES: 300,
    MOVED_PERMANENTLY: 301,
    FOUND: 302,
    SEE_OTHER: 303,
    NOT_MODIFIED: 304,
    USE_PROXY: 305,
    TEMPORARY_REDIRECT: 307,
    PERMANENT_REDIRECT: 308,

    // 4xx Client Errors
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    PAYMENT_REQUIRED: 402,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    METHOD_NOT_ALLOWED: 405,
    NOT_ACCEPTABLE: 406,
    PROXY_AUTHENTICATION_REQUIRED: 407,
    REQUEST_TIMEOUT: 408,
    CONFLICT: 409,
    GONE: 410,
    LENGTH_REQUIRED: 411,
    PRECONDITION_FAILED: 412,
    PAYLOAD_TOO_LARGE: 413,
    URI_TOO_LONG: 414,
    UNSUPPORTED_MEDIA_TYPE: 415,
    RANGE_NOT_SATISFIABLE: 416,
    EXPECTATION_FAILED: 417,
    IM_A_TEAPOT: 418,
    MISDIRECTED_REQUEST: 421,
    UNPROCESSABLE_ENTITY: 422,
    LOCKED: 423,
    FAILED_DEPENDENCY: 424,
    TOO_EARLY: 425,
    UPGRADE_REQUIRED: 426,
    PRECONDITION_REQUIRED: 428,
    TOO_MANY_REQUESTS: 429,
    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,
    UNAVAILABLE_FOR_LEGAL_REASONS: 451,

    // NON standard, used by nginx.
    CLIENT_CLOSED_REQUEST: 499,

    // 5xx Server Errors
    INTERNAL_SERVER_ERROR: 500,
    NOT_IMPLEMENTED: 501,
    BAD_GATEWAY: 502,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
    HTTP_VERSION_NOT_SUPPORTED: 505,
    VARIANT_ALSO_NEGOTIATES: 506,
    INSUFFICIENT_STORAGE: 507,
    LOOP_DETECTED: 508,
    NOT_EXTENDED: 510,
    NETWORK_AUTHENTICATION_REQUIRED: 511,
  },

  methods: {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    DELETE: 'DELETE',
    PATCH: 'PATCH',
    HEAD: 'HEAD',
    OPTIONS: 'OPTIONS',
    CONNECT: 'CONNECT',
    TRACE: 'TRACE',
  },

  headers: {
    // Request Headers
    ACCEPT: 'accept',
    ACCEPT_CHARSET: 'accept-charset',
    ACCEPT_DATETIME: 'accept-datetime',
    ACCEPT_ENCODING: 'accept-encoding',
    ACCEPT_LANGUAGE: 'accept-language',
    AUTHORIZATION: 'authorization',
    CACHE_CONTROL: 'cache-control',
    CONNECTION: 'connection',
    CONTENT_LENGTH: 'content-length',
    CONTENT_MD5: 'content-md5',
    CONTENT_TYPE: 'content-type',
    COOKIE: 'cookie',
    DATE: 'date',
    EXPECT: 'expect',
    FORWARDED: 'forwarded',
    FROM: 'from',
    HOST: 'host',
    IF_MATCH: 'if-match',
    IF_MODIFIED_SINCE: 'if-modified-since',
    IF_NONE_MATCH: 'if-none-match',
    IF_RANGE: 'if-range',
    IF_UNMODIFIED_SINCE: 'if-unmodified-since',
    MAX_FORWARDS: 'max-forwards',
    ORIGIN: 'origin',
    PRAGMA: 'pragma',
    PROXY_AUTHORIZATION: 'proxy-authorization',
    RANGE: 'range',
    REFERER: 'referer',
    TE: 'te',
    TRANSFER_ENCODING: 'transfer-encoding',
    UPGRADE: 'upgrade',
    USER_AGENT: 'user-agent',
    VIA: 'via',
    WARNING: 'warning',

    // Response Headers
    ACCEPT_PATCH: 'accept-patch',
    ACCEPT_RANGES: 'accept-ranges',
    ACCESS_CONTROL_ALLOW_CREDENTIALS: 'access-control-allow-credentials',
    ACCESS_CONTROL_ALLOW_HEADERS: 'access-control-allow-headers',
    ACCESS_CONTROL_ALLOW_METHODS: 'access-control-allow-methods',
    ACCESS_CONTROL_ALLOW_ORIGIN: 'access-control-allow-origin',
    ACCESS_CONTROL_EXPOSE_HEADERS: 'access-control-expose-headers',
    ACCESS_CONTROL_MAX_AGE: 'access-control-max-age',
    AGE: 'age',
    ALLOW: 'allow',
    ALT_SVC: 'alt-svc',
    CONTENT_DISPOSITION: 'content-disposition',
    CONTENT_ENCODING: 'content-encoding',
    CONTENT_LANGUAGE: 'content-language',
    CONTENT_LOCATION: 'content-location',
    CONTENT_RANGE: 'content-range',
    DELTA_BASE: 'delta-base',
    ETAG: 'etag',
    EXPIRES: 'expires',
    IM: 'im',
    LAST_MODIFIED: 'last-modified',
    LINK: 'link',
    LOCATION: 'location',
    P3P: 'p3p',
    PROXY_AUTHENTICATE: 'proxy-authenticate',
    PUBLIC_KEY_PINS: 'public-key-pins',
    RETRY_AFTER: 'retry-after',
    SERVER: 'server',
    SET_COOKIE: 'set-cookie',
    STRICT_TRANSPORT_SECURITY: 'strict-transport-security',
    TRAILER: 'trailer',
    VARY: 'vary',
    WWW_AUTHENTICATE: 'www-authenticate',
    X_FRAME_OPTIONS: 'x-frame-options',

    // Common Non-Standard Headers
    DNT: 'dnt',
    FRONT_END_HTTPS: 'front-end-https',
    PROXY_CONNECTION: 'proxy-connection',
    SAVE_DATA: 'save-data',
    X_ATT_DEVICEID: 'x-att-deviceid',
    X_CORRELATION_ID: 'x-correlation-id',
    X_CSRF_TOKEN: 'x-csrf-token',
    X_FORWARDED_FOR: 'x-forwarded-for',
    X_FORWARDED_HOST: 'x-forwarded-host',
    X_FORWARDED_PROTO: 'x-forwarded-proto',
    X_HTTP_METHOD_OVERRIDE: 'x-http-method-override',
    X_REQUESTED_WITH: 'x-requested-with',
    X_REQUEST_ID: 'x-request-id',
    X_UIDH: 'x-uidh',
    X_WAP_PROFILE: 'x-wap-profile',

    // Security Headers
    CONTENT_SECURITY_POLICY: 'content-security-policy',
    CONTENT_SECURITY_POLICY_REPORT_ONLY: 'content-security-policy-report-only',
    FEATURE_POLICY: 'feature-policy',
    PERMISSIONS_POLICY: 'permissions-policy',
    REFERRER_POLICY: 'referrer-policy',
    X_CONTENT_TYPE_OPTIONS: 'x-content-type-options',
    X_XSS_PROTECTION: 'x-xss-protection',

    // Modern Security & Privacy Headers
    CROSS_ORIGIN_EMBEDDER_POLICY: 'cross-origin-embedder-policy',
    CROSS_ORIGIN_OPENER_POLICY: 'cross-origin-opener-policy',
    CROSS_ORIGIN_RESOURCE_POLICY: 'cross-origin-resource-policy',
    EXPECT_CT: 'expect-ct',
    ORIGIN_AGENT_CLUSTER: 'origin-agent-cluster',
    REPORT_TO: 'report-to',
    REPORTING_ENDPOINTS: 'reporting-endpoints',

    // Client Hints
    ACCEPT_CH: 'accept-ch',
    ACCEPT_CH_LIFETIME: 'accept-ch-lifetime',
    CRITICAL_CH: 'critical-ch',
    DEVICE_MEMORY: 'device-memory',
    DOWNLINK: 'downlink',
    DPR: 'dpr',
    ECT: 'ect',
    RTT: 'rtt',
    VIEWPORT_WIDTH: 'viewport-width',
    WIDTH: 'width',

    // Resource Timing & Networking
    EARLY_DATA: 'early-data',
    PRIORITY: 'priority',
    TIMING_ALLOW_ORIGIN: 'timing-allow-origin',
  },
}

export default [
  ...Object.entries(defaultConstants).map(([k, v]) => ({
    fn: spec[k],
    expect: v,
    info: `${k} values are equal`,
  })),
  ...Object.entries(headers).map(([k, v]) => ({
    fn: spec.headers[k] === v,
    info: `header ${k} values are equal`,
  })),
  ...Object.entries(methods).map(([k, v]) => ({
    fn: spec.methods[k] === v,
    info: `methods ${k} values are equal`,
  })),
  ...Object.entries(status).map(([k, v]) => ({
    fn: spec.status[k] === v,
    info: `status ${k} values are equal`,
  })),
]
